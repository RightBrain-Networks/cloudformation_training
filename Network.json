{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Cloud Formation Class - Reference App - Network Stack.",
  "Parameters": {
    "Project":{
       "Description":"Name of Project",
       "Type":"String",
       "Default":"CFN-Training"
    },
    "BastionSSHFrom": {
      "Description": "Lockdown SSH access to the bastion host",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
    },
    "KeyPair": {
      "Description": "KeyPair Name for Instances.",
      "Type": "String",
      "Default": "",
      "ConstraintDescription": "must be a existing Key Pair."
    },
    "AMIID" : {
      "Description" : "The id of the AMI you want to use",
      "Type" : "String",
      "Default" : "ami-bba18dd2",
      "ConstraintDescription" : "must be a string."
    },
    "BucketName": {
      "Description": "The S3 bucket containing server config files",
      "Type": "String",
      "Default": "",
      "ConstraintDescription": "must be a string."
    },
    "NATInstanceType": {
      "Description": "Application EC2 instance type",
      "Type": "String",
      "Default": "m1.small",
      "AllowedValues": ["m1.small", "m1.medium"],
      "ConstraintDescription": "must be a m1.small or m1.medium"
    },
    "BastionInstanceType": {
      "Description": "Application EC2 instance type",
      "Type": "String",
      "Default": "m1.small",
      "AllowedValues": ["m1.small", "m1.medium"],
      "ConstraintDescription": "must be a m1.small or m1.medium"
    },
    "NATProvisionFileName" : {
      "Description" : "The config file name for Nat Instance",
      "Type" : "String",
      "Default" : "",
      "ConstraintDescription" : "must be a string."
    }
  },
  "Mappings": {
    "SubnetConfig": {
      "VPC":                {  "CIDR": "10.0.128.0/23"   },
      "DMZ-AZ-1":           {  "CIDR": "10.0.128.0/28"   },
      "DMZ-AZ-2":           {  "CIDR": "10.0.128.16/28"  },
      "PUBLIC-ELB-AZ-1":    {  "CIDR": "10.0.128.32/27"  },
      "PUBLIC-ELB-AZ-2":    {  "CIDR": "10.0.128.64/27"  },
      "INTERNAL-ELB-AZ-1":  {  "CIDR": "10.0.128.96/27"  },
      "INTERNAL-ELB-AZ-2":  {  "CIDR": "10.0.128.128/27" },
      "WEB-AZ-1":           {  "CIDR": "10.0.128.160/28" },
      "WEB-AZ-2":           {  "CIDR": "10.0.128.176/28" },
      "SYNC-APP-AZ-1":      {  "CIDR": "10.0.128.192/28" },
      "SYNC-APP-AZ-2":      {  "CIDR": "10.0.128.208/28" },
      "MESSAGE-QUEUE-AZ-1": {  "CIDR": "10.0.128.224/28" },
      "MESSAGE-QUEUE-AZ-2": {  "CIDR": "10.0.128.240/28" },
      "ASYNC-APP-AZ-1":     {  "CIDR": "10.0.129.0/28"   },
      "ASYNC-APP-AZ-2":     {  "CIDR": "10.0.129.16/28"  },
      "DB-AZ-1":            {  "CIDR": "10.0.129.32/28"  },
      "DB-AZ-2":            {  "CIDR": "10.0.129.48/28"  }
    }
  },
  "Resources": {
    "AppRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [{"Effect": "Allow", "Principal": {"Service": ["ec2.amazonaws.com"]},
          "Action": ["sts:AssumeRole"]
            }]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "DefaultAppRole",
            "PolicyDocument": {
              "Statement": [ {"Effect": "Allow", "Action": "*", "Resource": "*"} ]
            }
          }
        ]
      }
    },
    "AppInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ {"Ref": "AppRole"} ]
      }
    },
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {"Fn::FindInMap": [ "SubnetConfig", "VPC", "CIDR" ]},
        "Tags": [ {"Key": "project", "Value": { "Ref": "Project" } } ]
      }
    },
    "DmzAz1Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "CidrBlock": {"Fn::FindInMap": [ "SubnetConfig", "DMZ-AZ-1", "CIDR" ]},
        "AvailabilityZone": {"Fn::Select": [ "0", {"Fn::GetAZs": ""}] },
        "Tags": [ {"Key": "project", "Value": { "Ref": "Project" } } ]
      }
    },
    "DmzAz2Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "CidrBlock": {"Fn::FindInMap": [ "SubnetConfig", "DMZ-AZ-2", "CIDR" ] },
        "AvailabilityZone": { "Fn::Select": [ "1", {"Fn::GetAZs": ""} ]},
        "Tags": [ {"Key": "project", "Value": { "Ref": "Project" } } ] 
		}
    },
    "PublicELBAz1Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "CidrBlock": {"Fn::FindInMap": [ "SubnetConfig", "PUBLIC-ELB-AZ-1", "CIDR" ]},
        "AvailabilityZone": { "Fn::Select": [ "0", {"Fn::GetAZs": ""} ]},
        "Tags": [ {"Key": "project", "Value": { "Ref": "Project" } } ]
      }
    },
    "PublicELBAz2Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "CidrBlock": {"Fn::FindInMap": [ "SubnetConfig", "PUBLIC-ELB-AZ-2", "CIDR" ]},
        "AvailabilityZone": {"Fn::Select": [ "1", {"Fn::GetAZs": ""} ]},
        "Tags": [ {"Key": "project", "Value": { "Ref": "Project" } } ]
      }
    },
    "InternalELBAz1Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "CidrBlock": {"Fn::FindInMap": [ "SubnetConfig", "INTERNAL-ELB-AZ-1", "CIDR" ]},
        "AvailabilityZone": {"Fn::Select": [ "0", {"Fn::GetAZs": ""} ]},
        "Tags": [ {"Key": "project", "Value": { "Ref": "Project" } } ]   
		}
    },
    "InternalELBAz2Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "CidrBlock": {"Fn::FindInMap": [ "SubnetConfig", "INTERNAL-ELB-AZ-2", "CIDR" ]},
        "AvailabilityZone": {"Fn::Select": [ "1", {"Fn::GetAZs": ""} ] },
        "Tags": [ {"Key": "project", "Value": { "Ref": "Project" } } ]
      }
    },
    "SyncAppAz1Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "CidrBlock": {"Fn::FindInMap": [ "SubnetConfig", "SYNC-APP-AZ-1", "CIDR" ]},
        "AvailabilityZone": {"Fn::Select": [ "0", {"Fn::GetAZs": ""} ]},
        "Tags": [ {"Key": "project", "Value": { "Ref": "Project" } } ]      
		}
    },
    "SyncAppAz2Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "CidrBlock": {"Fn::FindInMap": [ "SubnetConfig", "SYNC-APP-AZ-2", "CIDR"]},
        "AvailabilityZone": {"Fn::Select": [ "1", {"Fn::GetAZs": ""} ]},
        "Tags": [ {"Key": "project", "Value": { "Ref": "Project" } } ]
      }
    },
    "DBAz1Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "CidrBlock": {"Fn::FindInMap": [ "SubnetConfig", "DB-AZ-1", "CIDR" ]},
        "AvailabilityZone": {"Fn::Select": [ "0", {"Fn::GetAZs": ""} ]},
        "Tags": [ {"Key": "project", "Value": { "Ref": "Project" } } ]
      }
    },
    "DBAz2Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "CidrBlock": {"Fn::FindInMap": [ "SubnetConfig", "DB-AZ-2", "CIDR"]},
        "AvailabilityZone": {"Fn::Select": [ "1", {"Fn::GetAZs": ""} ]},
        "Tags": [ {"Key": "project", "Value": { "Ref": "Project" } } ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [ {"Key": "project", "Value": { "Ref": "Project" } } ]
      }
    },
    "GatewayToInternet": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "InternetGatewayId": {"Ref": "InternetGateway"}
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "VPC"}
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {"Ref": "PublicRouteTable"},
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {"Ref": "InternetGateway"}
      }
    },
    "PublicSubnetRouteTableAssociationDmzAz1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {"Ref": "DmzAz1Subnet"},
        "RouteTableId": {"Ref": "PublicRouteTable"}
      }
    },
    "PublicSubnetRouteTableAssociationDmzAz2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {"Ref": "DmzAz2Subnet"},
        "RouteTableId": {"Ref": "PublicRouteTable"}
      }
    },
    "PublicSubnetRouteTableAssociationPublicELBAz1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {"Ref": "PublicELBAz1Subnet"},
        "RouteTableId": {"Ref": "PublicRouteTable"}
      }
    },
    "PublicSubnetRouteTableAssociationInternalELBAz1Subnet": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {"Ref": "InternalELBAz1Subnet"},
        "RouteTableId": {"Ref": "PrivateRouteTableAz1"}
      }
    },
    "PublicSubnetRouteTableAssociationPublicElbAz2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {"Ref": "PublicELBAz2Subnet"},
        "RouteTableId": {"Ref": "PublicRouteTable"}
      }
    },
    "PublicSubnetRouteTableAssociationInternalELBAz2Subnet": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {"Ref": "InternalELBAz2Subnet"},
        "RouteTableId": {"Ref": "PrivateRouteTableAz2"}
      }
    },
    "PrivateRouteTableAz1": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "VPC"}
      }
    },
    "PrivateRouteAz1": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {"Ref": "PrivateRouteTableAz1" },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NetworkInterfaceId": {"Ref": "EniNATAz1"}
      }
    },
    "PrivateSubnetRouteTableAssociationSyncAppAz1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {"Ref": "SyncAppAz1Subnet"},
        "RouteTableId": {"Ref": "PrivateRouteTableAz1"}
      }
    },
    "PrivateSubnetRouteTableAssociationDBAz1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {"Ref": "DBAz1Subnet"},
        "RouteTableId": {"Ref": "PrivateRouteTableAz1"}
      }
    },
    "PrivateRouteTableAz2": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "VPC"}
      }
    },
    "PrivateRouteAz2": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {"Ref": "PrivateRouteTableAz2"},
        "DestinationCidrBlock": "0.0.0.0/0",
        "NetworkInterfaceId": {"Ref": "EniNATAz2"}
      }
    },
    "PrivateSubnetRouteTableAssociationSyncAppAz2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {"Ref": "SyncAppAz2Subnet"},
        "RouteTableId": {"Ref": "PrivateRouteTableAz2"}
      }
    },
    "PrivateSubnetRouteTableAssociationDBAz2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {"Ref": "DBAz2Subnet"},
        "RouteTableId": {"Ref": "PrivateRouteTableAz2"}
      }
    },
    "DhcpOptions": {
      "Type": "AWS::EC2::DHCPOptions",
      "Properties": {
        "DomainName": "refapp.internal",
        "DomainNameServers": [ "AmazonProvidedDNS" ],
        "Tags": [ {"Key": "project", "Value": { "Ref": "Project" } }, {"Key": "Name", "Value": "Training_DHCP"} ]
      }
    },
    "DHCPOptionsAssociation": {
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "DhcpOptionsId": {"Ref": "DhcpOptions"}
      }
    },
    "EniNATAz1": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "Network Interface for NAT in AZ1",
        "GroupSet": [ {"Ref": "NATSecurityGroup"} ],
        "SubnetId": {"Ref": "DmzAz1Subnet"},
        "Tags": [ { "Key": "project", "Value": { "Ref": "Project" } } ]
      }
    },
    "EniNATAz2": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "Network Interface for NAT in AZ2",
        "GroupSet": [ {"Ref": "NATSecurityGroup"} ],
        "SubnetId": {"Ref": "DmzAz2Subnet"},
        "Tags": [ {"Key": "project", "Value": { "Ref": "Project" } } ]
      }
    },
    "NATSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable internal access to the NAT device",
        "VpcId": {"Ref": "VPC"},
        "SecurityGroupIngress": [
          {"IpProtocol": "icmp", "FromPort": "-1", "ToPort": "-1", "CidrIp": "0.0.0.0/0"},
          {"IpProtocol": "tcp", "FromPort": "0", "ToPort": "65535", "CidrIp": {"Fn::FindInMap": [ "SubnetConfig", "VPC", "CIDR"]}},
          {"IpProtocol": "udp", "FromPort": "0", "ToPort": "65535", "CidrIp": {"Fn::FindInMap": [ "SubnetConfig", "VPC", "CIDR"]}}
        ],
        "SecurityGroupEgress": [
          {"IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": {"Fn::FindInMap": [ "SubnetConfig", "VPC", "CIDR"]}},
          {"IpProtocol": "icmp", "FromPort": "-1", "ToPort": "-1", "CidrIp": "0.0.0.0/0"},
          {"IpProtocol": "udp", "FromPort": "0", "ToPort": "65535", "CidrIp": "0.0.0.0/0"},
          {"IpProtocol": "tcp", "FromPort": "0", "ToPort": "65535", "CidrIp": "0.0.0.0/0"}
        ],
        "Tags": [ {"Key": "project", "Value": { "Ref": "Project" } } ]
      }
    },
    "BastionSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable internal access to the Bastion device",
        "VpcId": {"Ref": "VPC"},
        "SecurityGroupIngress": [
          {"IpProtocol": "icmp", "FromPort": "-1", "ToPort": "-1", "CidrIp": "0.0.0.0/0"},
          {"IpProtocol": "tcp",  "FromPort": "22", "ToPort": "22", "CidrIp": {"Ref": "BastionSSHFrom"} }
        ],
        "SecurityGroupEgress": [
          {"IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": {"Fn::FindInMap": ["SubnetConfig", "VPC", "CIDR"]} },
          {"IpProtocol": "icmp", "FromPort": "-1", "ToPort": "-1", "CidrIp": "0.0.0.0/0" },
          {"IpProtocol": "udp", "FromPort": "0", "ToPort": "65535", "CidrIp": "0.0.0.0/0"},
          {"IpProtocol": "tcp", "FromPort": "0", "ToPort": "65535", "CidrIp": "0.0.0.0/0"}
        ],
        "Tags": [ {"Key": "project", "Value": { "Ref": "Project" } } ]
      }
    },
    "EniBastionAz1": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "Network Interface for DMZ in AZ1",
        "GroupSet": [ {"Ref": "BastionSecurityGroup"} ],
        "SubnetId": {"Ref": "DmzAz1Subnet"},
        "Tags": [ {"Key": "project", "Value": { "Ref": "Project" } } ]
      }
    },
    "BastionHostAz1": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "provision": [
              "region"
            ]
          },
          "region": {
            "files": {
              "/root/.aws/config": {
                "content": { "Fn::Join": [ "",[
                      "[default] \n",
                      "region = ", { "Ref": "AWS::Region" }
                    ]
                  ]
                },
                "mode": "000644",
                "owner": "root",
                "group": "root"
              }
            }
          }
        }
      },
      "Properties": {
        "AvailabilityZone": {"Fn::Select": [ "0", {"Fn::GetAZs": ""} ]},
        "InstanceType": {"Ref": "BastionInstanceType"},
        "IamInstanceProfile": {"Ref": "AppInstanceProfile"},
        "KeyName": {"Ref": "KeyPair"},
        "NetworkInterfaces": [ {"NetworkInterfaceId": {"Ref": "EniBastionAz1"}, "DeviceIndex": "0"} ],
        "SourceDestCheck": "true",
        "ImageId": { "Ref" : "AMIID" },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "resize2fs /dev/xvde1 \n",
                "exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1 \n",
                "export HOME=/root \n",
                "hostname BastionAz1\n",
                "/opt/aws/bin/cfn-init -s ",
                {
                  "Ref": "AWS::StackId"
                },
                " -r BastionHostAz1 -c provision",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        },
        "Tags": [ {"Key": "Name", "Value": "Bastion-Host"}, 
                  {"Key": "project", "Value": { "Ref": "Project" } } ]
      },
      "DependsOn": ["BastionIPAssociationAz1"]
    },
    "NATDeviceAz2": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "provision": [
              "region"
            ]
          },
          "region": {
            "files": {
              "/root/.aws/config": {
                "content": { "Fn::Join": [ "", [
                      "[default] \n",
                      "region = ", { "Ref": "AWS::Region" }
                    ]
                  ]
                },
                "mode": "000644",
                "owner": "root",
                "group": "root"
              }
            }
          }
        }
      },
      "Properties": {
        "AvailabilityZone": {"Fn::Select": [ "1", {"Fn::GetAZs": ""} ]},
        "InstanceType": {"Ref": "NATInstanceType"},
        "IamInstanceProfile": {"Ref": "AppInstanceProfile"},
        "KeyName": {"Ref": "KeyPair"},
        "NetworkInterfaces": [ {"NetworkInterfaceId": {"Ref": "EniNATAz2"}, "DeviceIndex": "0"} ],
        "SourceDestCheck": "false",
        "ImageId": { "Ref" : "AMIID" },
        "BlockDeviceMappings": [ {"DeviceName": "/dev/sdb", "VirtualName": "ephemeral0"} ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "resize2fs /dev/xvde1 \n",
                "exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1 \n",
                "export HOME=/root \n",
                "hostname nat2 \n",
                "/opt/aws/bin/cfn-init -s ",
                {   "Ref": "AWS::StackId"   },
                "   -r NATDeviceAz2 -c provision",
                "   --region ",
                {   "Ref": "AWS::Region"    },
                "\n",
                "aws s3 cp s3://", { "Ref": "BucketName" }, "/", { "Ref": "NATProvisionFileName" }, " /usr/local/bin/provision.sh \n",
                "chmod +x /usr/local/bin/provision.sh \n",
                "/usr/local/bin/provision.sh \n"
              ]
            ]
          }
        },
        "Tags": [ {"Key": "Name", "Value": "NAT-Gateway-Az2"}, {"Key": "project", "Value": { "Ref": "Project" } } ]
      },
      "DependsOn": ["NatIPAssociationAz2"]
    },
    "NATDeviceAz1": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "provision": [ "region" ]
          },
          "region": {
            "files": {
              "/root/.aws/config": {
                "content": { "Fn::Join": [ "", [
                      "[default] \n",
                      "region = ", { "Ref": "AWS::Region" }
                    ]
                  ]
                },
                "mode": "000644",
                "owner": "root",
                "group": "root"
              }
            }
          }
        }
      },
      "Properties": {
        "AvailabilityZone": {"Fn::Select": [ "0", {"Fn::GetAZs": ""} ]},
        "InstanceType": {"Ref": "NATInstanceType"},
        "IamInstanceProfile": {"Ref": "AppInstanceProfile"},
        "KeyName": {"Ref": "KeyPair"},
        "NetworkInterfaces": [ {"NetworkInterfaceId": {"Ref": "EniNATAz1"}, "DeviceIndex": "0"} ],
        "SourceDestCheck": "false",
        "ImageId": { "Ref" : "AMIID" },
        "BlockDeviceMappings": [ {"DeviceName": "/dev/sdb", "VirtualName": "ephemeral0"} ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "resize2fs /dev/xvde1 \n",
                "exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1 \n",
                "export HOME=/root \n",
                "hostname nat2 \n",
                "/opt/aws/bin/cfn-init -s ",
                {   "Ref": "AWS::StackId"   },
                "   -r NATDeviceAz2 -c provision",
                "   --region ",
                {   "Ref": "AWS::Region"    },
                "\n",
                "aws s3 cp s3://", { "Ref": "BucketName" }, "/", { "Ref": "NATProvisionFileName" }, " /usr/local/bin/provision.sh \n",
                "chmod +x /usr/local/bin/provision.sh \n",
                "/usr/local/bin/provision.sh \n"
              ]
            ]
          }
        },
        "Tags": [ {"Key": "Name", "Value": "NAT-Gateway-Az1"}, {"Key": "project", "Value": { "Ref": "Project" } } ]
      },
      "DependsOn": ["NatIPAssociationAz1"]
    },
    "EipNatAz1": {
      "Type": "AWS::EC2::EIP",
      "Properties": { "Domain": "vpc" }
    },
    "EipNatAz2": {
      "Type": "AWS::EC2::EIP",
      "Properties": { "Domain": "vpc" }
    },
    "EipBastionAz1": {
      "Type": "AWS::EC2::EIP",
      "Properties": { "Domain": "vpc" }
    },
    "BastionIPAssociationAz1": {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "AllocationId": { "Fn::GetAtt": ["EipBastionAz1", "AllocationId"] },
        "NetworkInterfaceId": {"Ref": "EniBastionAz1"}
      }
    },
    "NatIPAssociationAz1": {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "AllocationId": {"Fn::GetAtt": [ "EipNatAz1", "AllocationId" ]},
        "NetworkInterfaceId": {"Ref": "EniNATAz1"}
      }
    },
    "NatIPAssociationAz2": {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "AllocationId": {"Fn::GetAtt": [ "EipNatAz2", "AllocationId" ]},
        "NetworkInterfaceId": {"Ref": "EniNATAz2"}
      }
    }
  },
  "Outputs": {
    "VPC": {
      "Description": "ID of new VPC",
      "Value": {"Ref": "VPC"}
    },
    "VPCCIDR": {
      "Description": "CIDR block of VPC",
      "Value": {"Fn::FindInMap": [ "SubnetConfig", "VPC", "CIDR"]}
    },
    "ListofRouteTables": {
      "Description": "List of RouteTable ID's to be passed for VPN Route Propagation",
      "Value": {"Fn::Join": [ "", [ {"Ref": "PrivateRouteTableAz1"}, ", ", {"Ref": "PrivateRouteTableAz2"} ] ]
      }
    },
    "DmzAz1Subnet": {
      "Description": "ID of DmzAz1Subnet",
      "Value": { "Ref": "DmzAz1Subnet"}
    },
    "DmzAz2Subnet": {
      "Description": "ID of DmzAz2Subnet",
      "Value": {"Ref": "DmzAz2Subnet"}
    },
    "PublicELBAz1Subnet": {
      "Description": "ID of PublicELBAz1Subnet",
      "Value": {"Ref": "PublicELBAz1Subnet"}
    },
    "PublicELBAz2Subnet": {
      "Description": "ID of PublicELBAz2Subnet",
      "Value": {"Ref": "PublicELBAz2Subnet"}
    },
    "InternalELBAz1Subnet": {
      "Description": "ID of InternalELBAz1Subnet",
      "Value": {"Ref": "InternalELBAz1Subnet"}
    },
    "InternalELBAz2Subnet": {
      "Description": "ID of InternalELBAz2Subnet",
      "Value": {"Ref": "InternalELBAz2Subnet"}
    },
    "SyncAppAz1Subnet": {
      "Description": "ID of SyncAppAz1Subnet",
      "Value": {"Ref": "SyncAppAz1Subnet"}
    },
    "SyncAppAz2Subnet": {
      "Description": "ID of SyncAppAz2Subnet",
      "Value": {"Ref": "SyncAppAz2Subnet"}
    },
    "DBAz1Subnet": {
      "Description": "ID of DBAz1Subnet",
      "Value": {"Ref": "DBAz1Subnet"}
    },
    "DBAz2Subnet": {
      "Description": "ID of DBAz2Subnet",
      "Value": {"Ref": "DBAz2Subnet"}
    },
    "NATSecurityGroup": {
      "Description": "ID of NATSecurityGroup",
      "Value": {"Ref": "NATSecurityGroup"}
    },
    "BastionSecurityGroup": {
      "Description": "ID of BastionSecurityGroup",
      "Value": {"Ref": "BastionSecurityGroup"}
    },
    "AppInstanceProfile": {
      "Description": "ID of new AppInstanceProfile",
      "Value": {"Ref": "AppInstanceProfile"}
    }
  }
}
